<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="982" onload="init(evt)" viewBox="0 0 1200 982" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="982" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="965.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="965.00"> </text><svg id="frames" x="10" width="1180" total_samples="4020931297"><g><title>[rmpc-theme-gen] (583,111,201 samples, 14.50%)</title><rect x="67.3415%" y="741" width="14.5019%" height="15" fill="rgb(227,0,7)" fg:x="2707753786" fg:w="583111201"/><text x="67.5915%" y="751.50">[rmpc-theme-gen]</text></g><g><title>[rmpc-theme-gen] (583,111,201 samples, 14.50%)</title><rect x="67.3415%" y="725" width="14.5019%" height="15" fill="rgb(217,0,24)" fg:x="2707753786" fg:w="583111201"/><text x="67.5915%" y="735.50">[rmpc-theme-gen]</text></g><g><title>[rmpc-theme-gen] (6,854,851 samples, 0.17%)</title><rect x="81.6729%" y="709" width="0.1705%" height="15" fill="rgb(221,193,54)" fg:x="3284010136" fg:w="6854851"/><text x="81.9229%" y="719.50"></text></g><g><title>__memmove_avx_unaligned_erms (9,981,147 samples, 0.25%)</title><rect x="81.8434%" y="741" width="0.2482%" height="15" fill="rgb(248,212,6)" fg:x="3290864987" fg:w="9981147"/><text x="82.0934%" y="751.50"></text></g><g><title>[unknown] (3,439,430 samples, 0.09%)</title><rect x="82.0060%" y="725" width="0.0855%" height="15" fill="rgb(208,68,35)" fg:x="3297406704" fg:w="3439430"/><text x="82.2560%" y="735.50"></text></g><g><title>[unknown] (3,439,430 samples, 0.09%)</title><rect x="82.0060%" y="709" width="0.0855%" height="15" fill="rgb(232,128,0)" fg:x="3297406704" fg:w="3439430"/><text x="82.2560%" y="719.50"></text></g><g><title>[unknown] (3,439,430 samples, 0.09%)</title><rect x="82.0060%" y="693" width="0.0855%" height="15" fill="rgb(207,160,47)" fg:x="3297406704" fg:w="3439430"/><text x="82.2560%" y="703.50"></text></g><g><title>[rmpc-theme-gen] (640,373,993 samples, 15.93%)</title><rect x="66.2055%" y="773" width="15.9260%" height="15" fill="rgb(228,23,34)" fg:x="2662079064" fg:w="640373993"/><text x="66.4555%" y="783.50">[rmpc-theme-gen]</text></g><g><title>[rmpc-theme-gen] (640,373,991 samples, 15.93%)</title><rect x="66.2055%" y="757" width="15.9260%" height="15" fill="rgb(218,30,26)" fg:x="2662079066" fg:w="640373991"/><text x="66.4555%" y="767.50">[rmpc-theme-gen]</text></g><g><title>__memset_avx2_unaligned_erms (1,606,923 samples, 0.04%)</title><rect x="82.0916%" y="741" width="0.0400%" height="15" fill="rgb(220,122,19)" fg:x="3300846134" fg:w="1606923"/><text x="82.3416%" y="751.50"></text></g><g><title>[unknown] (1,606,923 samples, 0.04%)</title><rect x="82.0916%" y="725" width="0.0400%" height="15" fill="rgb(250,228,42)" fg:x="3300846134" fg:w="1606923"/><text x="82.3416%" y="735.50"></text></g><g><title>[unknown] (1,606,923 samples, 0.04%)</title><rect x="82.0916%" y="709" width="0.0400%" height="15" fill="rgb(240,193,28)" fg:x="3300846134" fg:w="1606923"/><text x="82.3416%" y="719.50"></text></g><g><title>[unknown] (1,606,923 samples, 0.04%)</title><rect x="82.0916%" y="693" width="0.0400%" height="15" fill="rgb(216,20,37)" fg:x="3300846134" fg:w="1606923"/><text x="82.3416%" y="703.50"></text></g><g><title>[unknown] (1,606,923 samples, 0.04%)</title><rect x="82.0916%" y="677" width="0.0400%" height="15" fill="rgb(206,188,39)" fg:x="3300846134" fg:w="1606923"/><text x="82.3416%" y="687.50"></text></g><g><title>[unknown] (1,606,923 samples, 0.04%)</title><rect x="82.0916%" y="661" width="0.0400%" height="15" fill="rgb(217,207,13)" fg:x="3300846134" fg:w="1606923"/><text x="82.3416%" y="671.50"></text></g><g><title>[rmpc-theme-gen] (715,243,065 samples, 17.79%)</title><rect x="64.4207%" y="789" width="17.7880%" height="15" fill="rgb(231,73,38)" fg:x="2590312423" fg:w="715243065"/><text x="64.6707%" y="799.50">[rmpc-theme-gen]</text></g><g><title>__powf_fma (3,102,430 samples, 0.08%)</title><rect x="82.1315%" y="773" width="0.0772%" height="15" fill="rgb(225,20,46)" fg:x="3302453058" fg:w="3102430"/><text x="82.3815%" y="783.50"></text></g><g><title>[unknown] (4,907,589 samples, 0.12%)</title><rect x="82.2087%" y="789" width="0.1221%" height="15" fill="rgb(210,31,41)" fg:x="3305555488" fg:w="4907589"/><text x="82.4587%" y="799.50"></text></g><g><title>[unknown] (1,652,891 samples, 0.04%)</title><rect x="82.2896%" y="773" width="0.0411%" height="15" fill="rgb(221,200,47)" fg:x="3308810186" fg:w="1652891"/><text x="82.5396%" y="783.50"></text></g><g><title>[rmpc-theme-gen] (1,065,596,585 samples, 26.50%)</title><rect x="58.2498%" y="805" width="26.5012%" height="15" fill="rgb(226,26,5)" fg:x="2342182550" fg:w="1065596585"/><text x="58.4998%" y="815.50">[rmpc-theme-gen]</text></g><g><title>__powf_fma (97,316,058 samples, 2.42%)</title><rect x="82.3308%" y="789" width="2.4202%" height="15" fill="rgb(249,33,26)" fg:x="3310463077" fg:w="97316058"/><text x="82.5808%" y="799.50">__..</text></g><g><title>[unknown] (55,816,683 samples, 1.39%)</title><rect x="84.7510%" y="805" width="1.3882%" height="15" fill="rgb(235,183,28)" fg:x="3407779135" fg:w="55816683"/><text x="85.0010%" y="815.50"></text></g><g><title>[unknown] (29,160,978 samples, 0.73%)</title><rect x="85.4139%" y="789" width="0.7252%" height="15" fill="rgb(221,5,38)" fg:x="3434434840" fg:w="29160978"/><text x="85.6639%" y="799.50"></text></g><g><title>[unknown] (26,343,939 samples, 0.66%)</title><rect x="85.4840%" y="773" width="0.6552%" height="15" fill="rgb(247,18,42)" fg:x="3437251879" fg:w="26343939"/><text x="85.7340%" y="783.50"></text></g><g><title>[unknown] (17,596,801 samples, 0.44%)</title><rect x="85.7015%" y="757" width="0.4376%" height="15" fill="rgb(241,131,45)" fg:x="3445999017" fg:w="17596801"/><text x="85.9515%" y="767.50"></text></g><g><title>[unknown] (2,851,409 samples, 0.07%)</title><rect x="86.0682%" y="741" width="0.0709%" height="15" fill="rgb(249,31,29)" fg:x="3460744409" fg:w="2851409"/><text x="86.3182%" y="751.50"></text></g><g><title>cfree@GLIBC_2.2.5 (3,798,520 samples, 0.09%)</title><rect x="86.1392%" y="805" width="0.0945%" height="15" fill="rgb(225,111,53)" fg:x="3463596546" fg:w="3798520"/><text x="86.3892%" y="815.50"></text></g><g><title>_int_free_chunk (3,727,941 samples, 0.09%)</title><rect x="86.1409%" y="789" width="0.0927%" height="15" fill="rgb(238,160,17)" fg:x="3463667125" fg:w="3727941"/><text x="86.3909%" y="799.50"></text></g><g><title>_int_free_merge_chunk (3,674,488 samples, 0.09%)</title><rect x="86.1422%" y="773" width="0.0914%" height="15" fill="rgb(214,148,48)" fg:x="3463720578" fg:w="3674488"/><text x="86.3922%" y="783.50"></text></g><g><title>[rmpc-theme-gen] (3,467,395,096 samples, 86.23%)</title><rect x="0.0000%" y="901" width="86.2336%" height="15" fill="rgb(232,36,49)" fg:x="0" fg:w="3467395096"/><text x="0.2500%" y="911.50">[rmpc-theme-gen]</text></g><g><title>__libc_start_main@@GLIBC_2.34 (3,467,395,096 samples, 86.23%)</title><rect x="0.0000%" y="885" width="86.2336%" height="15" fill="rgb(209,103,24)" fg:x="0" fg:w="3467395096"/><text x="0.2500%" y="895.50">__libc_start_main@@GLIBC_2.34</text></g><g><title>__libc_start_call_main (3,467,395,096 samples, 86.23%)</title><rect x="0.0000%" y="869" width="86.2336%" height="15" fill="rgb(229,88,8)" fg:x="0" fg:w="3467395096"/><text x="0.2500%" y="879.50">__libc_start_call_main</text></g><g><title>[rmpc-theme-gen] (3,467,395,096 samples, 86.23%)</title><rect x="0.0000%" y="853" width="86.2336%" height="15" fill="rgb(213,181,19)" fg:x="0" fg:w="3467395096"/><text x="0.2500%" y="863.50">[rmpc-theme-gen]</text></g><g><title>[rmpc-theme-gen] (3,467,395,096 samples, 86.23%)</title><rect x="0.0000%" y="837" width="86.2336%" height="15" fill="rgb(254,191,54)" fg:x="0" fg:w="3467395096"/><text x="0.2500%" y="847.50">[rmpc-theme-gen]</text></g><g><title>[rmpc-theme-gen] (3,467,395,096 samples, 86.23%)</title><rect x="0.0000%" y="821" width="86.2336%" height="15" fill="rgb(241,83,37)" fg:x="0" fg:w="3467395096"/><text x="0.2500%" y="831.50">[rmpc-theme-gen]</text></g><g><title>[rmpc-theme-gen] (30,011,959 samples, 0.75%)</title><rect x="99.0891%" y="309" width="0.7464%" height="15" fill="rgb(233,36,39)" fg:x="3984303272" fg:w="30011959"/><text x="99.3391%" y="319.50"></text></g><g><title>[rmpc-theme-gen] (30,011,959 samples, 0.75%)</title><rect x="99.0891%" y="293" width="0.7464%" height="15" fill="rgb(226,3,54)" fg:x="3984303272" fg:w="30011959"/><text x="99.3391%" y="303.50"></text></g><g><title>[rmpc-theme-gen] (29,203,292 samples, 0.73%)</title><rect x="99.1092%" y="277" width="0.7263%" height="15" fill="rgb(245,192,40)" fg:x="3985111939" fg:w="29203292"/><text x="99.3592%" y="287.50"></text></g><g><title>[rmpc-theme-gen] (26,112,585 samples, 0.65%)</title><rect x="99.1860%" y="261" width="0.6494%" height="15" fill="rgb(238,167,29)" fg:x="3988202646" fg:w="26112585"/><text x="99.4360%" y="271.50"></text></g><g><title>[rmpc-theme-gen] (23,891,664 samples, 0.59%)</title><rect x="99.2413%" y="245" width="0.5942%" height="15" fill="rgb(232,182,51)" fg:x="3990423567" fg:w="23891664"/><text x="99.4913%" y="255.50"></text></g><g><title>[rmpc-theme-gen] (23,891,664 samples, 0.59%)</title><rect x="99.2413%" y="229" width="0.5942%" height="15" fill="rgb(231,60,39)" fg:x="3990423567" fg:w="23891664"/><text x="99.4913%" y="239.50"></text></g><g><title>[rmpc-theme-gen] (12,159,822 samples, 0.30%)</title><rect x="99.5330%" y="213" width="0.3024%" height="15" fill="rgb(208,69,12)" fg:x="4002155409" fg:w="12159822"/><text x="99.7830%" y="223.50"></text></g><g><title>[rmpc-theme-gen] (12,159,822 samples, 0.30%)</title><rect x="99.5330%" y="197" width="0.3024%" height="15" fill="rgb(235,93,37)" fg:x="4002155409" fg:w="12159822"/><text x="99.7830%" y="207.50"></text></g><g><title>[rmpc-theme-gen] (12,159,822 samples, 0.30%)</title><rect x="99.5330%" y="181" width="0.3024%" height="15" fill="rgb(213,116,39)" fg:x="4002155409" fg:w="12159822"/><text x="99.7830%" y="191.50"></text></g><g><title>[rmpc-theme-gen] (12,159,822 samples, 0.30%)</title><rect x="99.5330%" y="165" width="0.3024%" height="15" fill="rgb(222,207,29)" fg:x="4002155409" fg:w="12159822"/><text x="99.7830%" y="175.50"></text></g><g><title>[rmpc-theme-gen] (6,016,489 samples, 0.15%)</title><rect x="99.6858%" y="149" width="0.1496%" height="15" fill="rgb(206,96,30)" fg:x="4008298742" fg:w="6016489"/><text x="99.9358%" y="159.50"></text></g><g><title>[rmpc-theme-gen] (6,016,489 samples, 0.15%)</title><rect x="99.6858%" y="133" width="0.1496%" height="15" fill="rgb(218,138,4)" fg:x="4008298742" fg:w="6016489"/><text x="99.9358%" y="143.50"></text></g><g><title>[rmpc-theme-gen] (2,130,354 samples, 0.05%)</title><rect x="99.7825%" y="117" width="0.0530%" height="15" fill="rgb(250,191,14)" fg:x="4012184877" fg:w="2130354"/><text x="100.0325%" y="127.50"></text></g><g><title>[rmpc-theme-gen] (2,130,354 samples, 0.05%)</title><rect x="99.7825%" y="101" width="0.0530%" height="15" fill="rgb(239,60,40)" fg:x="4012184877" fg:w="2130354"/><text x="100.0325%" y="111.50"></text></g><g><title>[rmpc-theme-gen] (2,130,354 samples, 0.05%)</title><rect x="99.7825%" y="85" width="0.0530%" height="15" fill="rgb(206,27,48)" fg:x="4012184877" fg:w="2130354"/><text x="100.0325%" y="95.50"></text></g><g><title>[rmpc-theme-gen] (2,130,354 samples, 0.05%)</title><rect x="99.7825%" y="69" width="0.0530%" height="15" fill="rgb(225,35,8)" fg:x="4012184877" fg:w="2130354"/><text x="100.0325%" y="79.50"></text></g><g><title>[rmpc-theme-gen] (2,130,354 samples, 0.05%)</title><rect x="99.7825%" y="53" width="0.0530%" height="15" fill="rgb(250,213,24)" fg:x="4012184877" fg:w="2130354"/><text x="100.0325%" y="63.50"></text></g><g><title>[rmpc-theme-gen] (2,130,354 samples, 0.05%)</title><rect x="99.7825%" y="37" width="0.0530%" height="15" fill="rgb(247,123,22)" fg:x="4012184877" fg:w="2130354"/><text x="100.0325%" y="47.50"></text></g><g><title>[rmpc-theme-gen] (62,676,209 samples, 1.56%)</title><rect x="98.2767%" y="389" width="1.5587%" height="15" fill="rgb(231,138,38)" fg:x="3951639336" fg:w="62676209"/><text x="98.5267%" y="399.50"></text></g><g><title>[rmpc-theme-gen] (49,833,737 samples, 1.24%)</title><rect x="98.5961%" y="373" width="1.2394%" height="15" fill="rgb(231,145,46)" fg:x="3964481808" fg:w="49833737"/><text x="98.8461%" y="383.50"></text></g><g><title>[rmpc-theme-gen] (49,833,737 samples, 1.24%)</title><rect x="98.5961%" y="357" width="1.2394%" height="15" fill="rgb(251,118,11)" fg:x="3964481808" fg:w="49833737"/><text x="98.8461%" y="367.50"></text></g><g><title>[rmpc-theme-gen] (37,001,766 samples, 0.92%)</title><rect x="98.9152%" y="341" width="0.9202%" height="15" fill="rgb(217,147,25)" fg:x="3977313779" fg:w="37001766"/><text x="99.1652%" y="351.50"></text></g><g><title>[rmpc-theme-gen] (37,001,766 samples, 0.92%)</title><rect x="98.9152%" y="325" width="0.9202%" height="15" fill="rgb(247,81,37)" fg:x="3977313779" fg:w="37001766"/><text x="99.1652%" y="335.50"></text></g><g><title>[rmpc-theme-gen] (82,605,225 samples, 2.05%)</title><rect x="97.7811%" y="421" width="2.0544%" height="15" fill="rgb(209,12,38)" fg:x="3931710321" fg:w="82605225"/><text x="98.0311%" y="431.50">[..</text></g><g><title>[rmpc-theme-gen] (62,676,530 samples, 1.56%)</title><rect x="98.2767%" y="405" width="1.5588%" height="15" fill="rgb(227,1,9)" fg:x="3951639016" fg:w="62676530"/><text x="98.5267%" y="415.50"></text></g><g><title>[rmpc-theme-gen] (93,154,249 samples, 2.32%)</title><rect x="97.5187%" y="453" width="2.3167%" height="15" fill="rgb(248,47,43)" fg:x="3921161615" fg:w="93154249"/><text x="97.7687%" y="463.50">[..</text></g><g><title>[rmpc-theme-gen] (90,550,365 samples, 2.25%)</title><rect x="97.5835%" y="437" width="2.2520%" height="15" fill="rgb(221,10,30)" fg:x="3923765499" fg:w="90550365"/><text x="97.8335%" y="447.50">[..</text></g><g><title>[rmpc-theme-gen] (99,337,474 samples, 2.47%)</title><rect x="97.3650%" y="469" width="2.4705%" height="15" fill="rgb(210,229,1)" fg:x="3914978550" fg:w="99337474"/><text x="97.6150%" y="479.50">[r..</text></g><g><title>[rmpc-theme-gen] (143,872,867 samples, 3.58%)</title><rect x="96.2574%" y="501" width="3.5781%" height="15" fill="rgb(222,148,37)" fg:x="3870443158" fg:w="143872867"/><text x="96.5074%" y="511.50">[rmp..</text></g><g><title>[rmpc-theme-gen] (134,047,979 samples, 3.33%)</title><rect x="96.5017%" y="485" width="3.3338%" height="15" fill="rgb(234,67,33)" fg:x="3880268046" fg:w="134047979"/><text x="96.7517%" y="495.50">[rm..</text></g><g><title>[rmpc-theme-gen] (168,715,905 samples, 4.20%)</title><rect x="95.6395%" y="517" width="4.1959%" height="15" fill="rgb(247,98,35)" fg:x="3845600543" fg:w="168715905"/><text x="95.8895%" y="527.50">[rmpc..</text></g><g><title>[rmpc-theme-gen] (168,722,900 samples, 4.20%)</title><rect x="95.6394%" y="533" width="4.1961%" height="15" fill="rgb(247,138,52)" fg:x="3845593550" fg:w="168722900"/><text x="95.8894%" y="543.50">[rmpc..</text></g><g><title>[rmpc-theme-gen] (198,748,326 samples, 4.94%)</title><rect x="94.8926%" y="549" width="4.9428%" height="15" fill="rgb(213,79,30)" fg:x="3815568256" fg:w="198748326"/><text x="95.1426%" y="559.50">[rmpc-..</text></g><g><title>[rmpc-theme-gen] (286,922,434 samples, 7.14%)</title><rect x="92.6998%" y="597" width="7.1357%" height="15" fill="rgb(246,177,23)" fg:x="3727394149" fg:w="286922434"/><text x="92.9498%" y="607.50">[rmpc-them..</text></g><g><title>[rmpc-theme-gen] (286,770,137 samples, 7.13%)</title><rect x="92.7036%" y="581" width="7.1319%" height="15" fill="rgb(230,62,27)" fg:x="3727546446" fg:w="286770137"/><text x="92.9536%" y="591.50">[rmpc-them..</text></g><g><title>[rmpc-theme-gen] (204,688,213 samples, 5.09%)</title><rect x="94.7449%" y="565" width="5.0906%" height="15" fill="rgb(216,154,8)" fg:x="3809628370" fg:w="204688213"/><text x="94.9949%" y="575.50">[rmpc-..</text></g><g><title>[rmpc-theme-gen] (388,444,394 samples, 9.66%)</title><rect x="90.1750%" y="613" width="9.6606%" height="15" fill="rgb(244,35,45)" fg:x="3625872970" fg:w="388444394"/><text x="90.4250%" y="623.50">[rmpc-theme-ge..</text></g><g><title>__sched_yield (3,851,197 samples, 0.10%)</title><rect x="99.8355%" y="613" width="0.0958%" height="15" fill="rgb(251,115,12)" fg:x="4014317488" fg:w="3851197"/><text x="100.0855%" y="623.50"></text></g><g><title>[unknown] (3,851,197 samples, 0.10%)</title><rect x="99.8355%" y="597" width="0.0958%" height="15" fill="rgb(240,54,50)" fg:x="4014317488" fg:w="3851197"/><text x="100.0855%" y="607.50"></text></g><g><title>[unknown] (3,851,197 samples, 0.10%)</title><rect x="99.8355%" y="581" width="0.0958%" height="15" fill="rgb(233,84,52)" fg:x="4014317488" fg:w="3851197"/><text x="100.0855%" y="591.50"></text></g><g><title>[unknown] (3,851,197 samples, 0.10%)</title><rect x="99.8355%" y="565" width="0.0958%" height="15" fill="rgb(207,117,47)" fg:x="4014317488" fg:w="3851197"/><text x="100.0855%" y="575.50"></text></g><g><title>[unknown] (3,851,197 samples, 0.10%)</title><rect x="99.8355%" y="549" width="0.0958%" height="15" fill="rgb(249,43,39)" fg:x="4014317488" fg:w="3851197"/><text x="100.0855%" y="559.50"></text></g><g><title>[unknown] (3,851,197 samples, 0.10%)</title><rect x="99.8355%" y="533" width="0.0958%" height="15" fill="rgb(209,38,44)" fg:x="4014317488" fg:w="3851197"/><text x="100.0855%" y="543.50"></text></g><g><title>[unknown] (3,844,613 samples, 0.10%)</title><rect x="99.8357%" y="517" width="0.0956%" height="15" fill="rgb(236,212,23)" fg:x="4014324072" fg:w="3844613"/><text x="100.0857%" y="527.50"></text></g><g><title>[unknown] (3,844,613 samples, 0.10%)</title><rect x="99.8357%" y="501" width="0.0956%" height="15" fill="rgb(242,79,21)" fg:x="4014324072" fg:w="3844613"/><text x="100.0857%" y="511.50"></text></g><g><title>[unknown] (3,844,613 samples, 0.10%)</title><rect x="99.8357%" y="485" width="0.0956%" height="15" fill="rgb(211,96,35)" fg:x="4014324072" fg:w="3844613"/><text x="100.0857%" y="495.50"></text></g><g><title>[unknown] (3,844,613 samples, 0.10%)</title><rect x="99.8357%" y="469" width="0.0956%" height="15" fill="rgb(253,215,40)" fg:x="4014324072" fg:w="3844613"/><text x="100.0857%" y="479.50"></text></g><g><title>[rmpc-theme-gen] (392,296,417 samples, 9.76%)</title><rect x="90.1749%" y="629" width="9.7564%" height="15" fill="rgb(211,81,21)" fg:x="3625872270" fg:w="392296417"/><text x="90.4249%" y="639.50">[rmpc-theme-ge..</text></g><g><title>[rmpc-theme-gen] (438,874,284 samples, 10.91%)</title><rect x="89.0166%" y="645" width="10.9147%" height="15" fill="rgb(208,190,38)" fg:x="3579294405" fg:w="438874284"/><text x="89.2666%" y="655.50">[rmpc-theme-gen]</text></g><g><title>[rmpc-theme-gen] (441,286,569 samples, 10.97%)</title><rect x="88.9566%" y="661" width="10.9747%" height="15" fill="rgb(235,213,38)" fg:x="3576882121" fg:w="441286569"/><text x="89.2066%" y="671.50">[rmpc-theme-gen]</text></g><g><title>[rmpc-theme-gen] (498,492,389 samples, 12.40%)</title><rect x="87.5339%" y="677" width="12.3974%" height="15" fill="rgb(237,122,38)" fg:x="3519676320" fg:w="498492389"/><text x="87.7839%" y="687.50">[rmpc-theme-gen]</text></g><g><title>[rmpc-theme-gen] (502,354,681 samples, 12.49%)</title><rect x="87.4380%" y="693" width="12.4935%" height="15" fill="rgb(244,218,35)" fg:x="3515820558" fg:w="502354681"/><text x="87.6880%" y="703.50">[rmpc-theme-gen]</text></g><g><title>[rmpc-theme-gen] (522,208,880 samples, 12.99%)</title><rect x="86.9442%" y="709" width="12.9873%" height="15" fill="rgb(240,68,47)" fg:x="3495966624" fg:w="522208880"/><text x="87.1942%" y="719.50">[rmpc-theme-gen]</text></g><g><title>[rmpc-theme-gen] (524,794,206 samples, 13.05%)</title><rect x="86.8799%" y="725" width="13.0516%" height="15" fill="rgb(210,16,53)" fg:x="3493381314" fg:w="524794206"/><text x="87.1299%" y="735.50">[rmpc-theme-gen]</text></g><g><title>[rmpc-theme-gen] (535,698,321 samples, 13.32%)</title><rect x="86.6093%" y="741" width="13.3227%" height="15" fill="rgb(235,124,12)" fg:x="3482499633" fg:w="535698321"/><text x="86.8593%" y="751.50">[rmpc-theme-gen]</text></g><g><title>[rmpc-theme-gen] (543,190,655 samples, 13.51%)</title><rect x="86.4229%" y="757" width="13.5091%" height="15" fill="rgb(224,169,11)" fg:x="3475007320" fg:w="543190655"/><text x="86.6729%" y="767.50">[rmpc-theme-gen]</text></g><g><title>[rmpc-theme-gen] (543,395,836 samples, 13.51%)</title><rect x="86.4179%" y="773" width="13.5142%" height="15" fill="rgb(250,166,2)" fg:x="3474802591" fg:w="543395836"/><text x="86.6679%" y="783.50">[rmpc-theme-gen]</text></g><g><title>[rmpc-theme-gen] (548,141,131 samples, 13.63%)</title><rect x="86.2999%" y="789" width="13.6322%" height="15" fill="rgb(242,216,29)" fg:x="3470059488" fg:w="548141131"/><text x="86.5499%" y="799.50">[rmpc-theme-gen]</text></g><g><title>[rmpc-theme-gen] (548,300,730 samples, 13.64%)</title><rect x="86.2960%" y="805" width="13.6362%" height="15" fill="rgb(230,116,27)" fg:x="3469902698" fg:w="548300730"/><text x="86.5460%" y="815.50">[rmpc-theme-gen]</text></g><g><title>__sched_yield (2,368,853 samples, 0.06%)</title><rect x="99.9322%" y="805" width="0.0589%" height="15" fill="rgb(228,99,48)" fg:x="4018203905" fg:w="2368853"/><text x="100.1822%" y="815.50"></text></g><g><title>[unknown] (2,368,853 samples, 0.06%)</title><rect x="99.9322%" y="789" width="0.0589%" height="15" fill="rgb(253,11,6)" fg:x="4018203905" fg:w="2368853"/><text x="100.1822%" y="799.50"></text></g><g><title>[unknown] (2,341,475 samples, 0.06%)</title><rect x="99.9329%" y="773" width="0.0582%" height="15" fill="rgb(247,143,39)" fg:x="4018231283" fg:w="2341475"/><text x="100.1829%" y="783.50"></text></g><g><title>[unknown] (2,338,169 samples, 0.06%)</title><rect x="99.9329%" y="757" width="0.0581%" height="15" fill="rgb(236,97,10)" fg:x="4018234589" fg:w="2338169"/><text x="100.1829%" y="767.50"></text></g><g><title>[unknown] (2,338,169 samples, 0.06%)</title><rect x="99.9329%" y="741" width="0.0581%" height="15" fill="rgb(233,208,19)" fg:x="4018234589" fg:w="2338169"/><text x="100.1829%" y="751.50"></text></g><g><title>[unknown] (2,322,366 samples, 0.06%)</title><rect x="99.9333%" y="725" width="0.0578%" height="15" fill="rgb(216,164,2)" fg:x="4018250392" fg:w="2322366"/><text x="100.1833%" y="735.50"></text></g><g><title>[rmpc-theme-gen] (553,138,464 samples, 13.76%)</title><rect x="86.2346%" y="837" width="13.7565%" height="15" fill="rgb(220,129,5)" fg:x="3467434370" fg:w="553138464"/><text x="86.4846%" y="847.50">[rmpc-theme-gen]</text></g><g><title>[rmpc-theme-gen] (553,138,464 samples, 13.76%)</title><rect x="86.2346%" y="821" width="13.7565%" height="15" fill="rgb(242,17,10)" fg:x="3467434370" fg:w="553138464"/><text x="86.4846%" y="831.50">[rmpc-theme-gen]</text></g><g><title>[rmpc-theme-gen] (553,199,980 samples, 13.76%)</title><rect x="86.2346%" y="869" width="13.7580%" height="15" fill="rgb(242,107,0)" fg:x="3467434370" fg:w="553199980"/><text x="86.4846%" y="879.50">[rmpc-theme-gen]</text></g><g><title>[rmpc-theme-gen] (553,199,980 samples, 13.76%)</title><rect x="86.2346%" y="853" width="13.7580%" height="15" fill="rgb(251,28,31)" fg:x="3467434370" fg:w="553199980"/><text x="86.4846%" y="863.50">[rmpc-theme-gen]</text></g><g><title>__GI___clone3 (553,212,071 samples, 13.76%)</title><rect x="86.2346%" y="901" width="13.7583%" height="15" fill="rgb(233,223,10)" fg:x="3467433993" fg:w="553212071"/><text x="86.4846%" y="911.50">__GI___clone3</text></g><g><title>start_thread (553,212,071 samples, 13.76%)</title><rect x="86.2346%" y="885" width="13.7583%" height="15" fill="rgb(215,21,27)" fg:x="3467433993" fg:w="553212071"/><text x="86.4846%" y="895.50">start_thread</text></g><g><title>all (4,020,931,297 samples, 100%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(232,23,21)" fg:x="0" fg:w="4020931297"/><text x="0.2500%" y="943.50"></text></g><g><title>rmpc-theme-gen (4,020,931,297 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(244,5,23)" fg:x="0" fg:w="4020931297"/><text x="0.2500%" y="927.50">rmpc-theme-gen</text></g></svg></svg>
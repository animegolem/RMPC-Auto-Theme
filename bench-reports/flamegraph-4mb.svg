<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="886" onload="init(evt)" viewBox="0 0 1200 886" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="886" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="869.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="869.00"> </text><svg id="frames" x="10" width="1180" total_samples="4182641146"><g><title>[rmpc-theme-gen] (85,551,277 samples, 2.05%)</title><rect x="87.8644%" y="645" width="2.0454%" height="15" fill="rgb(227,0,7)" fg:x="3675052965" fg:w="85551277"/><text x="88.1144%" y="655.50">[..</text></g><g><title>[rmpc-theme-gen] (85,551,277 samples, 2.05%)</title><rect x="87.8644%" y="629" width="2.0454%" height="15" fill="rgb(217,0,24)" fg:x="3675052965" fg:w="85551277"/><text x="88.1144%" y="639.50">[..</text></g><g><title>[rmpc-theme-gen] (2,657,019 samples, 0.06%)</title><rect x="89.8463%" y="613" width="0.0635%" height="15" fill="rgb(221,193,54)" fg:x="3757947223" fg:w="2657019"/><text x="90.0963%" y="623.50"></text></g><g><title>[rmpc-theme-gen] (186,029,135 samples, 4.45%)</title><rect x="85.9204%" y="677" width="4.4476%" height="15" fill="rgb(248,212,6)" fg:x="3593741356" fg:w="186029135"/><text x="86.1704%" y="687.50">[rmpc..</text></g><g><title>[rmpc-theme-gen] (179,947,852 samples, 4.30%)</title><rect x="86.0658%" y="661" width="4.3023%" height="15" fill="rgb(208,68,35)" fg:x="3599822639" fg:w="179947852"/><text x="86.3158%" y="671.50">[rmpc..</text></g><g><title>__memmove_avx_unaligned_erms (19,166,249 samples, 0.46%)</title><rect x="89.9098%" y="645" width="0.4582%" height="15" fill="rgb(232,128,0)" fg:x="3760604242" fg:w="19166249"/><text x="90.1598%" y="655.50"></text></g><g><title>[unknown] (16,372,365 samples, 0.39%)</title><rect x="89.9766%" y="629" width="0.3914%" height="15" fill="rgb(207,160,47)" fg:x="3763398126" fg:w="16372365"/><text x="90.2266%" y="639.50"></text></g><g><title>[unknown] (13,508,578 samples, 0.32%)</title><rect x="90.0451%" y="613" width="0.3230%" height="15" fill="rgb(228,23,34)" fg:x="3766261913" fg:w="13508578"/><text x="90.2951%" y="623.50"></text></g><g><title>[unknown] (5,462,371 samples, 0.13%)</title><rect x="90.2374%" y="597" width="0.1306%" height="15" fill="rgb(218,30,26)" fg:x="3774308120" fg:w="5462371"/><text x="90.4874%" y="607.50"></text></g><g><title>[unknown] (5,462,371 samples, 0.13%)</title><rect x="90.2374%" y="581" width="0.1306%" height="15" fill="rgb(220,122,19)" fg:x="3774308120" fg:w="5462371"/><text x="90.4874%" y="591.50"></text></g><g><title>[unknown] (2,692,899 samples, 0.06%)</title><rect x="90.3036%" y="565" width="0.0644%" height="15" fill="rgb(250,228,42)" fg:x="3777077592" fg:w="2692899"/><text x="90.5536%" y="575.50"></text></g><g><title>[rmpc-theme-gen] (243,369,570 samples, 5.82%)</title><rect x="84.5663%" y="693" width="5.8186%" height="15" fill="rgb(240,193,28)" fg:x="3537105275" fg:w="243369570"/><text x="84.8163%" y="703.50">[rmpc-t..</text></g><g><title>malloc (704,354 samples, 0.02%)</title><rect x="90.3680%" y="677" width="0.0168%" height="15" fill="rgb(216,20,37)" fg:x="3779770491" fg:w="704354"/><text x="90.6180%" y="687.50"></text></g><g><title>_int_malloc (704,354 samples, 0.02%)</title><rect x="90.3680%" y="661" width="0.0168%" height="15" fill="rgb(206,188,39)" fg:x="3779770491" fg:w="704354"/><text x="90.6180%" y="671.50"></text></g><g><title>alloc_perturb (704,354 samples, 0.02%)</title><rect x="90.3680%" y="645" width="0.0168%" height="15" fill="rgb(217,207,13)" fg:x="3779770491" fg:w="704354"/><text x="90.6180%" y="655.50"></text></g><g><title>[unknown] (3,194,815 samples, 0.08%)</title><rect x="90.3849%" y="693" width="0.0764%" height="15" fill="rgb(231,73,38)" fg:x="3780474845" fg:w="3194815"/><text x="90.6349%" y="703.50"></text></g><g><title>[unknown] (1,638,194 samples, 0.04%)</title><rect x="90.4221%" y="677" width="0.0392%" height="15" fill="rgb(225,20,46)" fg:x="3782031466" fg:w="1638194"/><text x="90.6721%" y="687.50"></text></g><g><title>[unknown] (1,637,874 samples, 0.04%)</title><rect x="90.4221%" y="661" width="0.0392%" height="15" fill="rgb(210,31,41)" fg:x="3782031786" fg:w="1637874"/><text x="90.6721%" y="671.50"></text></g><g><title>[unknown] (1,637,874 samples, 0.04%)</title><rect x="90.4221%" y="645" width="0.0392%" height="15" fill="rgb(221,200,47)" fg:x="3782031786" fg:w="1637874"/><text x="90.6721%" y="655.50"></text></g><g><title>[unknown] (1,637,874 samples, 0.04%)</title><rect x="90.4221%" y="629" width="0.0392%" height="15" fill="rgb(226,26,5)" fg:x="3782031786" fg:w="1637874"/><text x="90.6721%" y="639.50"></text></g><g><title>[rmpc-theme-gen] (633,347,294 samples, 15.14%)</title><rect x="77.2905%" y="709" width="15.1423%" height="15" fill="rgb(249,33,26)" fg:x="3232783470" fg:w="633347294"/><text x="77.5405%" y="719.50">[rmpc-theme-gen]</text></g><g><title>__powf_fma (82,461,104 samples, 1.97%)</title><rect x="90.4613%" y="693" width="1.9715%" height="15" fill="rgb(235,183,28)" fg:x="3783669660" fg:w="82461104"/><text x="90.7113%" y="703.50">_..</text></g><g><title>[unknown] (27,264,844 samples, 0.65%)</title><rect x="92.4328%" y="709" width="0.6519%" height="15" fill="rgb(221,5,38)" fg:x="3866130764" fg:w="27264844"/><text x="92.6828%" y="719.50"></text></g><g><title>[unknown] (15,780,393 samples, 0.38%)</title><rect x="92.7073%" y="693" width="0.3773%" height="15" fill="rgb(247,18,42)" fg:x="3877615215" fg:w="15780393"/><text x="92.9573%" y="703.50"></text></g><g><title>[unknown] (5,872,036 samples, 0.14%)</title><rect x="92.9442%" y="677" width="0.1404%" height="15" fill="rgb(241,131,45)" fg:x="3887523572" fg:w="5872036"/><text x="93.1942%" y="687.50"></text></g><g><title>[unknown] (2,887,466 samples, 0.07%)</title><rect x="93.0156%" y="661" width="0.0690%" height="15" fill="rgb(249,31,29)" fg:x="3890508142" fg:w="2887466"/><text x="93.2656%" y="671.50"></text></g><g><title>[rmpc-theme-gen] (3,893,610,875 samples, 93.09%)</title><rect x="0.0000%" y="805" width="93.0898%" height="15" fill="rgb(225,111,53)" fg:x="0" fg:w="3893610875"/><text x="0.2500%" y="815.50">[rmpc-theme-gen]</text></g><g><title>__libc_start_main@@GLIBC_2.34 (3,893,610,875 samples, 93.09%)</title><rect x="0.0000%" y="789" width="93.0898%" height="15" fill="rgb(238,160,17)" fg:x="0" fg:w="3893610875"/><text x="0.2500%" y="799.50">__libc_start_main@@GLIBC_2.34</text></g><g><title>__libc_start_call_main (3,893,610,875 samples, 93.09%)</title><rect x="0.0000%" y="773" width="93.0898%" height="15" fill="rgb(214,148,48)" fg:x="0" fg:w="3893610875"/><text x="0.2500%" y="783.50">__libc_start_call_main</text></g><g><title>[rmpc-theme-gen] (3,893,610,875 samples, 93.09%)</title><rect x="0.0000%" y="757" width="93.0898%" height="15" fill="rgb(232,36,49)" fg:x="0" fg:w="3893610875"/><text x="0.2500%" y="767.50">[rmpc-theme-gen]</text></g><g><title>[rmpc-theme-gen] (3,893,610,875 samples, 93.09%)</title><rect x="0.0000%" y="741" width="93.0898%" height="15" fill="rgb(209,103,24)" fg:x="0" fg:w="3893610875"/><text x="0.2500%" y="751.50">[rmpc-theme-gen]</text></g><g><title>[rmpc-theme-gen] (3,893,610,875 samples, 93.09%)</title><rect x="0.0000%" y="725" width="93.0898%" height="15" fill="rgb(229,88,8)" fg:x="0" fg:w="3893610875"/><text x="0.2500%" y="735.50">[rmpc-theme-gen]</text></g><g><title>[rmpc-theme-gen] (71,892,654 samples, 1.72%)</title><rect x="97.6717%" y="357" width="1.7188%" height="15" fill="rgb(213,181,19)" fg:x="4085258650" fg:w="71892654"/><text x="97.9217%" y="367.50"></text></g><g><title>[rmpc-theme-gen] (49,762,169 samples, 1.19%)</title><rect x="98.2008%" y="341" width="1.1897%" height="15" fill="rgb(254,191,54)" fg:x="4107389135" fg:w="49762169"/><text x="98.4508%" y="351.50"></text></g><g><title>[rmpc-theme-gen] (49,762,169 samples, 1.19%)</title><rect x="98.2008%" y="325" width="1.1897%" height="15" fill="rgb(241,83,37)" fg:x="4107389135" fg:w="49762169"/><text x="98.4508%" y="335.50"></text></g><g><title>[rmpc-theme-gen] (29,641,914 samples, 0.71%)</title><rect x="98.6819%" y="309" width="0.7087%" height="15" fill="rgb(233,36,39)" fg:x="4127509390" fg:w="29641914"/><text x="98.9319%" y="319.50"></text></g><g><title>[rmpc-theme-gen] (23,066,078 samples, 0.55%)</title><rect x="98.8391%" y="293" width="0.5515%" height="15" fill="rgb(226,3,54)" fg:x="4134085226" fg:w="23066078"/><text x="99.0891%" y="303.50"></text></g><g><title>[rmpc-theme-gen] (16,987,826 samples, 0.41%)</title><rect x="98.9844%" y="277" width="0.4062%" height="15" fill="rgb(245,192,40)" fg:x="4140163478" fg:w="16987826"/><text x="99.2344%" y="287.50"></text></g><g><title>[rmpc-theme-gen] (16,987,826 samples, 0.41%)</title><rect x="98.9844%" y="261" width="0.4062%" height="15" fill="rgb(238,167,29)" fg:x="4140163478" fg:w="16987826"/><text x="99.2344%" y="271.50"></text></g><g><title>[rmpc-theme-gen] (16,987,826 samples, 0.41%)</title><rect x="98.9844%" y="245" width="0.4062%" height="15" fill="rgb(232,182,51)" fg:x="4140163478" fg:w="16987826"/><text x="99.2344%" y="255.50"></text></g><g><title>[rmpc-theme-gen] (16,987,826 samples, 0.41%)</title><rect x="98.9844%" y="229" width="0.4062%" height="15" fill="rgb(231,60,39)" fg:x="4140163478" fg:w="16987826"/><text x="99.2344%" y="239.50"></text></g><g><title>[rmpc-theme-gen] (7,396,313 samples, 0.18%)</title><rect x="99.2137%" y="213" width="0.1768%" height="15" fill="rgb(208,69,12)" fg:x="4149754991" fg:w="7396313"/><text x="99.4637%" y="223.50"></text></g><g><title>[rmpc-theme-gen] (7,396,313 samples, 0.18%)</title><rect x="99.2137%" y="197" width="0.1768%" height="15" fill="rgb(235,93,37)" fg:x="4149754991" fg:w="7396313"/><text x="99.4637%" y="207.50"></text></g><g><title>[rmpc-theme-gen] (7,396,313 samples, 0.18%)</title><rect x="99.2137%" y="181" width="0.1768%" height="15" fill="rgb(213,116,39)" fg:x="4149754991" fg:w="7396313"/><text x="99.4637%" y="191.50"></text></g><g><title>[rmpc-theme-gen] (7,396,313 samples, 0.18%)</title><rect x="99.2137%" y="165" width="0.1768%" height="15" fill="rgb(222,207,29)" fg:x="4149754991" fg:w="7396313"/><text x="99.4637%" y="175.50"></text></g><g><title>[rmpc-theme-gen] (5,356,726 samples, 0.13%)</title><rect x="99.2625%" y="149" width="0.1281%" height="15" fill="rgb(206,96,30)" fg:x="4151794578" fg:w="5356726"/><text x="99.5125%" y="159.50"></text></g><g><title>[rmpc-theme-gen] (5,356,726 samples, 0.13%)</title><rect x="99.2625%" y="133" width="0.1281%" height="15" fill="rgb(218,138,4)" fg:x="4151794578" fg:w="5356726"/><text x="99.5125%" y="143.50"></text></g><g><title>[rmpc-theme-gen] (5,356,726 samples, 0.13%)</title><rect x="99.2625%" y="117" width="0.1281%" height="15" fill="rgb(250,191,14)" fg:x="4151794578" fg:w="5356726"/><text x="99.5125%" y="127.50"></text></g><g><title>[rmpc-theme-gen] (5,351,591 samples, 0.13%)</title><rect x="99.2626%" y="101" width="0.1279%" height="15" fill="rgb(239,60,40)" fg:x="4151799713" fg:w="5351591"/><text x="99.5126%" y="111.50"></text></g><g><title>[rmpc-theme-gen] (5,351,591 samples, 0.13%)</title><rect x="99.2626%" y="85" width="0.1279%" height="15" fill="rgb(206,27,48)" fg:x="4151799713" fg:w="5351591"/><text x="99.5126%" y="95.50"></text></g><g><title>[rmpc-theme-gen] (3,061,446 samples, 0.07%)</title><rect x="99.3174%" y="69" width="0.0732%" height="15" fill="rgb(225,35,8)" fg:x="4154089858" fg:w="3061446"/><text x="99.5674%" y="79.50"></text></g><g><title>[rmpc-theme-gen] (3,061,446 samples, 0.07%)</title><rect x="99.3174%" y="53" width="0.0732%" height="15" fill="rgb(250,213,24)" fg:x="4154089858" fg:w="3061446"/><text x="99.5674%" y="63.50"></text></g><g><title>[rmpc-theme-gen] (3,061,446 samples, 0.07%)</title><rect x="99.3174%" y="37" width="0.0732%" height="15" fill="rgb(247,123,22)" fg:x="4154089858" fg:w="3061446"/><text x="99.5674%" y="47.50"></text></g><g><title>[rmpc-theme-gen] (88,847,398 samples, 2.12%)</title><rect x="97.3191%" y="421" width="2.1242%" height="15" fill="rgb(231,138,38)" fg:x="4070507590" fg:w="88847398"/><text x="97.5691%" y="431.50">[..</text></g><g><title>[rmpc-theme-gen] (81,747,978 samples, 1.95%)</title><rect x="97.4888%" y="405" width="1.9545%" height="15" fill="rgb(231,145,46)" fg:x="4077607010" fg:w="81747978"/><text x="97.7388%" y="415.50">[..</text></g><g><title>[rmpc-theme-gen] (81,747,978 samples, 1.95%)</title><rect x="97.4888%" y="389" width="1.9545%" height="15" fill="rgb(251,118,11)" fg:x="4077607010" fg:w="81747978"/><text x="97.7388%" y="399.50">[..</text></g><g><title>[rmpc-theme-gen] (74,096,338 samples, 1.77%)</title><rect x="97.6717%" y="373" width="1.7715%" height="15" fill="rgb(217,147,25)" fg:x="4085258650" fg:w="74096338"/><text x="97.9217%" y="383.50">[..</text></g><g><title>__sched_yield (2,203,684 samples, 0.05%)</title><rect x="99.3906%" y="357" width="0.0527%" height="15" fill="rgb(247,81,37)" fg:x="4157151304" fg:w="2203684"/><text x="99.6406%" y="367.50"></text></g><g><title>[unknown] (2,203,684 samples, 0.05%)</title><rect x="99.3906%" y="341" width="0.0527%" height="15" fill="rgb(209,12,38)" fg:x="4157151304" fg:w="2203684"/><text x="99.6406%" y="351.50"></text></g><g><title>__sched_yield (2,018,709 samples, 0.05%)</title><rect x="99.4433%" y="421" width="0.0483%" height="15" fill="rgb(227,1,9)" fg:x="4159354988" fg:w="2018709"/><text x="99.6933%" y="431.50"></text></g><g><title>[unknown] (2,018,709 samples, 0.05%)</title><rect x="99.4433%" y="405" width="0.0483%" height="15" fill="rgb(248,47,43)" fg:x="4159354988" fg:w="2018709"/><text x="99.6933%" y="415.50"></text></g><g><title>[unknown] (2,018,709 samples, 0.05%)</title><rect x="99.4433%" y="389" width="0.0483%" height="15" fill="rgb(221,10,30)" fg:x="4159354988" fg:w="2018709"/><text x="99.6933%" y="399.50"></text></g><g><title>[unknown] (2,018,709 samples, 0.05%)</title><rect x="99.4433%" y="373" width="0.0483%" height="15" fill="rgb(210,229,1)" fg:x="4159354988" fg:w="2018709"/><text x="99.6933%" y="383.50"></text></g><g><title>[unknown] (2,018,709 samples, 0.05%)</title><rect x="99.4433%" y="357" width="0.0483%" height="15" fill="rgb(222,148,37)" fg:x="4159354988" fg:w="2018709"/><text x="99.6933%" y="367.50"></text></g><g><title>[unknown] (2,018,709 samples, 0.05%)</title><rect x="99.4433%" y="341" width="0.0483%" height="15" fill="rgb(234,67,33)" fg:x="4159354988" fg:w="2018709"/><text x="99.6933%" y="351.50"></text></g><g><title>[unknown] (2,018,709 samples, 0.05%)</title><rect x="99.4433%" y="325" width="0.0483%" height="15" fill="rgb(247,98,35)" fg:x="4159354988" fg:w="2018709"/><text x="99.6933%" y="335.50"></text></g><g><title>[unknown] (2,018,709 samples, 0.05%)</title><rect x="99.4433%" y="309" width="0.0483%" height="15" fill="rgb(247,138,52)" fg:x="4159354988" fg:w="2018709"/><text x="99.6933%" y="319.50"></text></g><g><title>[unknown] (2,018,709 samples, 0.05%)</title><rect x="99.4433%" y="293" width="0.0483%" height="15" fill="rgb(213,79,30)" fg:x="4159354988" fg:w="2018709"/><text x="99.6933%" y="303.50"></text></g><g><title>[unknown] (2,018,709 samples, 0.05%)</title><rect x="99.4433%" y="277" width="0.0483%" height="15" fill="rgb(246,177,23)" fg:x="4159354988" fg:w="2018709"/><text x="99.6933%" y="287.50"></text></g><g><title>[rmpc-theme-gen] (124,216,819 samples, 2.97%)</title><rect x="96.5218%" y="453" width="2.9698%" height="15" fill="rgb(230,62,27)" fg:x="4037162377" fg:w="124216819"/><text x="96.7718%" y="463.50">[rm..</text></g><g><title>[rmpc-theme-gen] (90,871,622 samples, 2.17%)</title><rect x="97.3191%" y="437" width="2.1726%" height="15" fill="rgb(216,154,8)" fg:x="4070507574" fg:w="90871622"/><text x="97.5691%" y="447.50">[..</text></g><g><title>[rmpc-theme-gen] (153,980,811 samples, 3.68%)</title><rect x="95.8102%" y="485" width="3.6814%" height="15" fill="rgb(244,35,45)" fg:x="4007398387" fg:w="153980811"/><text x="96.0602%" y="495.50">[rmp..</text></g><g><title>[rmpc-theme-gen] (130,924,863 samples, 3.13%)</title><rect x="96.3615%" y="469" width="3.1302%" height="15" fill="rgb(251,115,12)" fg:x="4030454335" fg:w="130924863"/><text x="96.6115%" y="479.50">[rm..</text></g><g><title>[rmpc-theme-gen] (157,391,646 samples, 3.76%)</title><rect x="95.8102%" y="501" width="3.7630%" height="15" fill="rgb(240,54,50)" fg:x="4007398369" fg:w="157391646"/><text x="96.0602%" y="511.50">[rmp..</text></g><g><title>__sched_yield (3,410,816 samples, 0.08%)</title><rect x="99.4917%" y="485" width="0.0815%" height="15" fill="rgb(233,84,52)" fg:x="4161379199" fg:w="3410816"/><text x="99.7417%" y="495.50"></text></g><g><title>[unknown] (3,410,816 samples, 0.08%)</title><rect x="99.4917%" y="469" width="0.0815%" height="15" fill="rgb(207,117,47)" fg:x="4161379199" fg:w="3410816"/><text x="99.7417%" y="479.50"></text></g><g><title>[unknown] (3,410,816 samples, 0.08%)</title><rect x="99.4917%" y="453" width="0.0815%" height="15" fill="rgb(249,43,39)" fg:x="4161379199" fg:w="3410816"/><text x="99.7417%" y="463.50"></text></g><g><title>[rmpc-theme-gen] (212,865,876 samples, 5.09%)</title><rect x="94.4841%" y="533" width="5.0893%" height="15" fill="rgb(209,38,44)" fg:x="3951930737" fg:w="212865876"/><text x="94.7341%" y="543.50">[rmpc-..</text></g><g><title>[rmpc-theme-gen] (210,681,614 samples, 5.04%)</title><rect x="94.5363%" y="517" width="5.0370%" height="15" fill="rgb(236,212,23)" fg:x="3954114999" fg:w="210681614"/><text x="94.7863%" y="527.50">[rmpc-..</text></g><g><title>[rmpc-theme-gen] (245,304,421 samples, 5.86%)</title><rect x="93.7087%" y="549" width="5.8648%" height="15" fill="rgb(242,79,21)" fg:x="3919497398" fg:w="245304421"/><text x="93.9587%" y="559.50">[rmpc-t..</text></g><g><title>[rmpc-theme-gen] (245,304,990 samples, 5.86%)</title><rect x="93.7087%" y="565" width="5.8648%" height="15" fill="rgb(211,96,35)" fg:x="3919497124" fg:w="245304990"/><text x="93.9587%" y="575.50">[rmpc-t..</text></g><g><title>[rmpc-theme-gen] (249,210,201 samples, 5.96%)</title><rect x="93.6153%" y="581" width="5.9582%" height="15" fill="rgb(253,215,40)" fg:x="3915592253" fg:w="249210201"/><text x="93.8653%" y="591.50">[rmpc-th..</text></g><g><title>[rmpc-theme-gen] (249,211,191 samples, 5.96%)</title><rect x="93.6153%" y="597" width="5.9582%" height="15" fill="rgb(211,81,21)" fg:x="3915591264" fg:w="249211191"/><text x="93.8653%" y="607.50">[rmpc-th..</text></g><g><title>[rmpc-theme-gen] (264,430,133 samples, 6.32%)</title><rect x="93.2514%" y="613" width="6.3221%" height="15" fill="rgb(208,190,38)" fg:x="3900372342" fg:w="264430133"/><text x="93.5014%" y="623.50">[rmpc-th..</text></g><g><title>__sched_yield (9,468,649 samples, 0.23%)</title><rect x="99.5735%" y="613" width="0.2264%" height="15" fill="rgb(235,213,38)" fg:x="4164802657" fg:w="9468649"/><text x="99.8235%" y="623.50"></text></g><g><title>[unknown] (9,468,649 samples, 0.23%)</title><rect x="99.5735%" y="597" width="0.2264%" height="15" fill="rgb(237,122,38)" fg:x="4164802657" fg:w="9468649"/><text x="99.8235%" y="607.50"></text></g><g><title>[rmpc-theme-gen] (273,898,986 samples, 6.55%)</title><rect x="93.2514%" y="629" width="6.5485%" height="15" fill="rgb(244,218,35)" fg:x="3900372321" fg:w="273898986"/><text x="93.5014%" y="639.50">[rmpc-the..</text></g><g><title>[rmpc-theme-gen] (277,586,739 samples, 6.64%)</title><rect x="93.1634%" y="645" width="6.6366%" height="15" fill="rgb(240,68,47)" fg:x="3896689861" fg:w="277586739"/><text x="93.4134%" y="655.50">[rmpc-the..</text></g><g><title>[rmpc-theme-gen] (277,772,651 samples, 6.64%)</title><rect x="93.1612%" y="661" width="6.6411%" height="15" fill="rgb(210,16,53)" fg:x="3896598789" fg:w="277772651"/><text x="93.4112%" y="671.50">[rmpc-the..</text></g><g><title>[rmpc-theme-gen] (277,911,338 samples, 6.64%)</title><rect x="93.1582%" y="677" width="6.6444%" height="15" fill="rgb(235,124,12)" fg:x="3896471945" fg:w="277911338"/><text x="93.4082%" y="687.50">[rmpc-the..</text></g><g><title>[rmpc-theme-gen] (280,668,800 samples, 6.71%)</title><rect x="93.0923%" y="693" width="6.7103%" height="15" fill="rgb(224,169,11)" fg:x="3893714972" fg:w="280668800"/><text x="93.3423%" y="703.50">[rmpc-the..</text></g><g><title>[rmpc-theme-gen] (280,859,047 samples, 6.71%)</title><rect x="93.0916%" y="709" width="6.7149%" height="15" fill="rgb(250,166,2)" fg:x="3893686969" fg:w="280859047"/><text x="93.3416%" y="719.50">[rmpc-the..</text></g><g><title>__sched_yield (7,993,639 samples, 0.19%)</title><rect x="99.8065%" y="709" width="0.1911%" height="15" fill="rgb(242,216,29)" fg:x="4174546359" fg:w="7993639"/><text x="100.0565%" y="719.50"></text></g><g><title>[unknown] (7,993,341 samples, 0.19%)</title><rect x="99.8065%" y="693" width="0.1911%" height="15" fill="rgb(230,116,27)" fg:x="4174546657" fg:w="7993341"/><text x="100.0565%" y="703.50"></text></g><g><title>[unknown] (7,986,489 samples, 0.19%)</title><rect x="99.8066%" y="677" width="0.1909%" height="15" fill="rgb(228,99,48)" fg:x="4174553509" fg:w="7986489"/><text x="100.0566%" y="687.50"></text></g><g><title>[unknown] (7,977,623 samples, 0.19%)</title><rect x="99.8069%" y="661" width="0.1907%" height="15" fill="rgb(253,11,6)" fg:x="4174562375" fg:w="7977623"/><text x="100.0569%" y="671.50"></text></g><g><title>[unknown] (7,977,623 samples, 0.19%)</title><rect x="99.8069%" y="645" width="0.1907%" height="15" fill="rgb(247,143,39)" fg:x="4174562375" fg:w="7977623"/><text x="100.0569%" y="655.50"></text></g><g><title>[rmpc-theme-gen] (288,926,365 samples, 6.91%)</title><rect x="93.0898%" y="725" width="6.9077%" height="15" fill="rgb(236,97,10)" fg:x="3893613661" fg:w="288926365"/><text x="93.3398%" y="735.50">[rmpc-the..</text></g><g><title>[rmpc-theme-gen] (288,936,720 samples, 6.91%)</title><rect x="93.0898%" y="741" width="6.9080%" height="15" fill="rgb(233,208,19)" fg:x="3893613661" fg:w="288936720"/><text x="93.3398%" y="751.50">[rmpc-the..</text></g><g><title>[rmpc-theme-gen] (288,961,595 samples, 6.91%)</title><rect x="93.0898%" y="773" width="6.9086%" height="15" fill="rgb(216,164,2)" fg:x="3893613661" fg:w="288961595"/><text x="93.3398%" y="783.50">[rmpc-the..</text></g><g><title>[rmpc-theme-gen] (288,961,595 samples, 6.91%)</title><rect x="93.0898%" y="757" width="6.9086%" height="15" fill="rgb(220,129,5)" fg:x="3893613661" fg:w="288961595"/><text x="93.3398%" y="767.50">[rmpc-the..</text></g><g><title>__GI___clone3 (288,973,823 samples, 6.91%)</title><rect x="93.0898%" y="805" width="6.9089%" height="15" fill="rgb(242,17,10)" fg:x="3893613644" fg:w="288973823"/><text x="93.3398%" y="815.50">__GI___cl..</text></g><g><title>start_thread (288,973,823 samples, 6.91%)</title><rect x="93.0898%" y="789" width="6.9089%" height="15" fill="rgb(242,107,0)" fg:x="3893613644" fg:w="288973823"/><text x="93.3398%" y="799.50">start_thr..</text></g><g><title>all (4,182,641,146 samples, 100%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(251,28,31)" fg:x="0" fg:w="4182641146"/><text x="0.2500%" y="847.50"></text></g><g><title>rmpc-theme-gen (4,182,641,146 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(233,223,10)" fg:x="0" fg:w="4182641146"/><text x="0.2500%" y="831.50">rmpc-theme-gen</text></g></svg></svg>